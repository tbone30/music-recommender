package com.spotifydiscovery.backend.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.NotNull;
import jakarta.validation.constraints.Size;
import org.springframework.data.annotation.CreatedDate;
import org.springframework.data.annotation.LastModifiedDate;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import java.time.LocalDateTime;

/**
 * Playlist Entity for Spotify Discovery Platform
 * 
 * Represents a user-created playlist with metadata and track relationships.
 * Can be synced with Spotify playlists or exist as platform-specific collections.
 * 
 * @author Spotify Discovery Team
 */
@Entity
@Table(name = "playlists")
@EntityListeners(AuditingEntityListener.class)
public class Playlist {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true)
    private String spotifyId; // May be null for platform-specific playlists

    @Column(nullable = false)
    @NotBlank(message = "Playlist name is required")
    @Size(max = 200, message = "Playlist name must not exceed 200 characters")
    private String name;

    @Column(length = 1000)
    @Size(max = 1000, message = "Description must not exceed 1000 characters")
    private String description;

    @Column
    private String imageUrl;

    @Column
    private Boolean isPublic = false;

    @Column
    private Boolean isCollaborative = false;

    @Column
    private Integer trackCount = 0;

    @Column
    private Integer followerCount = 0;

    // Platform-specific fields
    @Column
    private Boolean isDiscoveryPlaylist = false; // Generated by our recommendation engine

    @Column
    private String playlistType; // discovered, user_created, spotify_sync, etc.

    @Column
    private String tags; // JSON array of tags for categorization

    @Column
    private Double averageRating;

    @Column
    private String moodProfile; // JSON object describing playlist mood

    // Spotify sync information
    @Column
    private Boolean isSyncedWithSpotify = false;

    @Column
    private LocalDateTime lastSyncedAt;

    @Column
    private String spotifySnapshotId; // For detecting changes

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "user_id", nullable = false)
    @NotNull(message = "User is required")
    private User user;

    @CreatedDate
    @Column(nullable = false, updatable = false)
    private LocalDateTime createdAt;

    @LastModifiedDate
    @Column(nullable = false)
    private LocalDateTime updatedAt;

    // Constructors
    public Playlist() {}

    public Playlist(String name, User user) {
        this.name = name;
        this.user = user;
    }

    public Playlist(String spotifyId, String name, User user) {
        this.spotifyId = spotifyId;
        this.name = name;
        this.user = user;
        this.isSyncedWithSpotify = true;
    }

    // Getters and Setters
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getSpotifyId() {
        return spotifyId;
    }

    public void setSpotifyId(String spotifyId) {
        this.spotifyId = spotifyId;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public String getImageUrl() {
        return imageUrl;
    }

    public void setImageUrl(String imageUrl) {
        this.imageUrl = imageUrl;
    }

    public Boolean getIsPublic() {
        return isPublic;
    }

    public void setIsPublic(Boolean isPublic) {
        this.isPublic = isPublic;
    }

    public Boolean getIsCollaborative() {
        return isCollaborative;
    }

    public void setIsCollaborative(Boolean isCollaborative) {
        this.isCollaborative = isCollaborative;
    }

    public Integer getTrackCount() {
        return trackCount;
    }

    public void setTrackCount(Integer trackCount) {
        this.trackCount = trackCount;
    }

    public Integer getFollowerCount() {
        return followerCount;
    }

    public void setFollowerCount(Integer followerCount) {
        this.followerCount = followerCount;
    }

    public Boolean getIsDiscoveryPlaylist() {
        return isDiscoveryPlaylist;
    }

    public void setIsDiscoveryPlaylist(Boolean isDiscoveryPlaylist) {
        this.isDiscoveryPlaylist = isDiscoveryPlaylist;
    }

    public String getPlaylistType() {
        return playlistType;
    }

    public void setPlaylistType(String playlistType) {
        this.playlistType = playlistType;
    }

    public String getTags() {
        return tags;
    }

    public void setTags(String tags) {
        this.tags = tags;
    }

    public Double getAverageRating() {
        return averageRating;
    }

    public void setAverageRating(Double averageRating) {
        this.averageRating = averageRating;
    }

    public String getMoodProfile() {
        return moodProfile;
    }

    public void setMoodProfile(String moodProfile) {
        this.moodProfile = moodProfile;
    }

    public Boolean getIsSyncedWithSpotify() {
        return isSyncedWithSpotify;
    }

    public void setIsSyncedWithSpotify(Boolean isSyncedWithSpotify) {
        this.isSyncedWithSpotify = isSyncedWithSpotify;
    }

    public LocalDateTime getLastSyncedAt() {
        return lastSyncedAt;
    }

    public void setLastSyncedAt(LocalDateTime lastSyncedAt) {
        this.lastSyncedAt = lastSyncedAt;
    }

    public String getSpotifySnapshotId() {
        return spotifySnapshotId;
    }

    public void setSpotifySnapshotId(String spotifySnapshotId) {
        this.spotifySnapshotId = spotifySnapshotId;
    }

    public User getUser() {
        return user;
    }

    public void setUser(User user) {
        this.user = user;
    }

    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(LocalDateTime createdAt) {
        this.createdAt = createdAt;
    }

    public LocalDateTime getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(LocalDateTime updatedAt) {
        this.updatedAt = updatedAt;
    }

    // Utility methods
    public void markAsSynced() {
        this.isSyncedWithSpotify = true;
        this.lastSyncedAt = LocalDateTime.now();
    }

    public boolean needsSync() {
        if (!Boolean.TRUE.equals(isSyncedWithSpotify)) return false;
        if (lastSyncedAt == null) return true;
        
        // Sync if more than 1 hour old
        return lastSyncedAt.isBefore(LocalDateTime.now().minusHours(1));
    }

    public void incrementTrackCount() {
        this.trackCount = (this.trackCount == null) ? 1 : this.trackCount + 1;
    }

    public void decrementTrackCount() {
        this.trackCount = (this.trackCount == null || this.trackCount <= 0) ? 0 : this.trackCount - 1;
    }

    @Override
    public String toString() {
        return "Playlist{" +
                "id=" + id +
                ", spotifyId='" + spotifyId + '\'' +
                ", name='" + name + '\'' +
                ", user=" + (user != null ? user.getDisplayName() : "null") +
                ", trackCount=" + trackCount +
                ", isPublic=" + isPublic +
                '}';
    }
}
