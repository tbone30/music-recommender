package com.spotifydiscovery.backend.repository;

import com.spotifydiscovery.backend.entity.Playlist;
import com.spotifydiscovery.backend.entity.User;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import java.time.LocalDateTime;
import java.util.List;
import java.util.Optional;

/**
 * Repository interface for Playlist entity operations
 * 
 * Provides CRUD operations and custom queries for playlist management,
 * including Spotify synchronization and discovery playlist creation.
 * 
 * @author Spotify Discovery Team
 */
@Repository
public interface PlaylistRepository extends JpaRepository<Playlist, Long> {

    /**
     * Find playlist by Spotify ID
     */
    Optional<Playlist> findBySpotifyId(String spotifyId);

    /**
     * Find all playlists for a specific user
     */
    List<Playlist> findByUser(User user);

    /**
     * Find all playlists for a specific user with pagination
     */
    Page<Playlist> findByUser(User user, Pageable pageable);

    /**
     * Find playlists by name (case-insensitive search)
     */
    List<Playlist> findByNameContainingIgnoreCase(String name);

    /**
     * Find public playlists
     */
    Page<Playlist> findByIsPublicTrue(Pageable pageable);

    /**
     * Find collaborative playlists
     */
    List<Playlist> findByIsCollaborativeTrue();

    /**
     * Find discovery playlists (generated by recommendation engine)
     */
    List<Playlist> findByIsDiscoveryPlaylistTrue();

    /**
     * Find discovery playlists for a specific user
     */
    List<Playlist> findByUserAndIsDiscoveryPlaylistTrue(User user);

    /**
     * Find playlists by type
     */
    List<Playlist> findByPlaylistType(String playlistType);

    /**
     * Find playlists synced with Spotify
     */
    List<Playlist> findByIsSyncedWithSpotifyTrue();

    /**
     * Find playlists that need synchronization
     */
    @Query("SELECT p FROM Playlist p WHERE p.isSyncedWithSpotify = true AND " +
           "(p.lastSyncedAt IS NULL OR p.lastSyncedAt < :threshold)")
    List<Playlist> findPlaylistsNeedingSync(@Param("threshold") LocalDateTime threshold);

    /**
     * Find playlists by user and sync status
     */
    List<Playlist> findByUserAndIsSyncedWithSpotify(User user, Boolean isSynced);

    /**
     * Find popular playlists (high follower count)
     */
    @Query("SELECT p FROM Playlist p WHERE p.isPublic = true ORDER BY p.followerCount DESC")
    Page<Playlist> findPopularPlaylists(Pageable pageable);

    /**
     * Find playlists with high track count
     */
    @Query("SELECT p FROM Playlist p WHERE p.trackCount >= :minTrackCount ORDER BY p.trackCount DESC")
    List<Playlist> findPlaylistsWithManyTracks(@Param("minTrackCount") Integer minTrackCount);

    /**
     * Find recently created playlists
     */
    @Query("SELECT p FROM Playlist p WHERE p.createdAt >= :since ORDER BY p.createdAt DESC")
    List<Playlist> findRecentPlaylists(@Param("since") LocalDateTime since);

    /**
     * Find recently updated playlists
     */
    @Query("SELECT p FROM Playlist p WHERE p.updatedAt >= :since ORDER BY p.updatedAt DESC")
    List<Playlist> findRecentlyUpdatedPlaylists(@Param("since") LocalDateTime since);

    /**
     * Search playlists by name, description, or tags
     */
    @Query("SELECT p FROM Playlist p WHERE " +
           "(:query IS NULL OR LOWER(p.name) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(p.description) LIKE LOWER(CONCAT('%', :query, '%')) OR " +
           "LOWER(p.tags) LIKE LOWER(CONCAT('%', :query, '%'))) AND " +
           "(:isPublic IS NULL OR p.isPublic = :isPublic)")
    Page<Playlist> searchPlaylists(@Param("query") String query, 
                                  @Param("isPublic") Boolean isPublic, 
                                  Pageable pageable);

    /**
     * Find playlists with specific tags
     */
    @Query("SELECT p FROM Playlist p WHERE p.tags LIKE %:tag%")
    List<Playlist> findByTag(@Param("tag") String tag);

    /**
     * Find highly rated playlists
     */
    @Query("SELECT p FROM Playlist p WHERE p.averageRating >= :minRating ORDER BY p.averageRating DESC")
    Page<Playlist> findHighlyRatedPlaylists(@Param("minRating") Double minRating, Pageable pageable);

    /**
     * Find empty playlists (for cleanup)
     */
    @Query("SELECT p FROM Playlist p WHERE p.trackCount = 0 OR p.trackCount IS NULL")
    List<Playlist> findEmptyPlaylists();

    /**
     * Count playlists by user
     */
    @Query("SELECT COUNT(p) FROM Playlist p WHERE p.user = :user")
    Long countByUser(@Param("user") User user);

    /**
     * Count discovery playlists by user
     */
    @Query("SELECT COUNT(p) FROM Playlist p WHERE p.user = :user AND p.isDiscoveryPlaylist = true")
    Long countDiscoveryPlaylistsByUser(@Param("user") User user);

    /**
     * Find user's most recent playlist
     */
    @Query("SELECT p FROM Playlist p WHERE p.user = :user ORDER BY p.createdAt DESC")
    Optional<Playlist> findMostRecentPlaylistByUser(@Param("user") User user, Pageable pageable);

    /**
     * Find playlists by mood profile
     */
    @Query("SELECT p FROM Playlist p WHERE p.moodProfile LIKE %:mood%")
    List<Playlist> findByMoodProfile(@Param("mood") String mood);

    /**
     * Check if playlist exists by Spotify ID
     */
    boolean existsBySpotifyId(String spotifyId);

    /**
     * Check if user has a playlist with specific name
     */
    boolean existsByUserAndName(User user, String name);

    /**
     * Find playlists that haven't been updated recently (for cleanup)
     */
    @Query("SELECT p FROM Playlist p WHERE p.updatedAt < :threshold AND p.isDiscoveryPlaylist = true")
    List<Playlist> findStaleDiscoveryPlaylists(@Param("threshold") LocalDateTime threshold);

    /**
     * Get playlists with snapshot ID mismatch (need resync)
     */
    @Query("SELECT p FROM Playlist p WHERE p.isSyncedWithSpotify = true AND p.spotifySnapshotId IS NOT NULL")
    List<Playlist> findPlaylistsForSnapshotCheck();
}
